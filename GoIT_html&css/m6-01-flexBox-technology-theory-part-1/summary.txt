Module 06.1-5 Технология FlexBox
	1. По умолчанию, у нас происходит поток документа. div - по умолчанию является блочным, поэтому в потоке документа стоит друг под другом и занимает всю ширину доступной внутри текущей строки.
	2. Что такое flexBox? Есть 2 типа вещей:
		a. flex-container (parent) - блок которому задан display: flex
		b. flex-element - элементы 1-й вложенности в контейнер
	3. Когда, какому-либо документу задается display: flex - он превращается в так называемый flex-container. Все что внутри flex-container (children) становится flex-element. Важно не дети детей, а именно 1-я вложенность.
	4. Блок с display: flex внутри себя отменяет блочную модель, как таковую. Происходит то, что называется flex позиционирование.
	5. flex-container имеет следующие особенности:
		a. главная ось - слева на право.
		b. поперечная ось - всегда перпендикулярная главной.
		c. У главной и поперечной осей есть flex-start - начало оси, и flex-end - конец оси.
		d. Элементы по умолчанию всегда позиционируются вдоль главной оси, теряя свою ширину и сжимаясь по своему контенту, если явно не указана ширина для flex-element.
	6. flex-direction: свойство, которое указывает направление главной оси, по умолчанию у display:flex - оно row - справа на лево.
	7. flex-direction: row-reverse - главная ось начинает строится с права на лево (не сдвигаются вправо, а именно начинают выстраиваться справа).
	8. flex-direction: column; делает главную ось вертикальной, идет сверху вниз.
	9. flex-direction: column-reverse; делает главную ось вертикальной, идет с низу вверх.
	10. Заметка: У нас есть поток документа, то есть у нас блочные элементы уже стоят сверху вниз. Если внутри контейнера есть блочные элементы им не нужно ставить display: flex и flex-direction: column, потому что поток документов уже сам это делает. Используем flexBox, когда нужно поменять что-то.
	11. justify-content: - выравнивает вдоль главной оси.
		a. justify-content: flex-start - блоки будут вначале главной оси (по умолчанию).
		b. justify-content: flex-end - блоки будут сдвинуты в конец главной оси.
		c. justify-content: center; - центрирует.
		d. justify-content: space-between; - все свободное пространство, внутри контейнера на главной оси равномерно распределяется между элементами.
		e. justify-content: space-around; - все свободное пространство, внутри контейнера на главной оси равномерно распределяется между элементами, а крайний левый и крайний правый элементы имеют отступы равные 50% отступов между самими элементами.
	12. Как узнать поддерживается браузерами какое-либо свойство? Смотрим ресурс https://caniuse.com/
	13. align-items - CSS свойство выравнивает flex-элементы текущей flex-линии таким же образом, как и justify-content, но в перпендикулярном направлении. Действует внутри каждой строки отдельно на контент.
		a. align-items: stratch; - выравнивает flex-элементы текущей flex-линии таким же образом, как и justify-content, но в перпендикулярном направлении.
		b. align-items: stratch; -  растягивается по умолчанию, но если есть фиксированная высота, то они будут соответствующей высоты.
		c. align-items: flex-start; - элементы становятся вначале.
		d. align-items: flex-end; - элементы становятся в конце.
		e. align-items: center; - элементы становятся по центру на поперечной оси.
	14. Если flex-direction: column, то поперечная ось будет не сверху вниз, а справа на лево по горизонтали, а значит свойство align-items: center; будет выравнивать по вертикале.
	15. Высота зачастую по контенту, и мы как правило ее не задаем, кроме как у картинок и иконок.
	16. align-self: center; - применяется к flex element - выровнять себя. Это свойство к контейнеру не применяется, а дается ребенку. Выравнивает элемент по поперечной сети, никогда не по главной. Вдоль главной оси выровнять самого себя никак нельзя.
		a. align-self: auto; - выравнивает по умолчанию, сходное положение, элемент прижат к крайнему правому положению поперечной оси.
		b. align-self: flex-end; - элемент прижимается в конец поперечной оси.
		c. align-self: center; - элемент становится в центр поперечной оси.
	17. Что произойдет если будут добавляться блоки при:
		a. display: inline-block - элемент на определенном этапе перепрыгнет на другую строку.
		b. float - элемент на определенном этапе перепрыгнет на другую строку.
		c. display: flex - будет заполняться элементами в 1 строку. Сколько бы мы не влепили элементов в flex-container, они все будут пытаться становиться рядом и сжимать друг друга, чтобы вместиться.
	18. flex-wrap: - для перенос flex-elements по на другую строку.
		a. flex-wrap: nowrap - по умолчанию в одну строку;
		b. flex-wrap: wrap; - перенос на следующую строку, если строка заполнена елементами.
	19. В многострочном flex-container строки в высоту делят flex-container на равные части и justify-content и align-items действуют на каждую строку отдельно, а не магически как-то на весь контент.
	20. align-content - свойство CSS выравнивает линии контейнера flex в контейнере flex при наличии дополнительного пространства на перекрестной оси. Это свойство не имеет никакое влияние на однострочные гибкие блоки. Действует не внутри строк, а на сами строки.
	21. flex-children могут быть flex-родители для своего контент. Вложенность flex может быть бесконечной, сколько хотите.
	22. flex-basis - задание начальной ширины блоку.
	23. flex-grow - коэффициент роста.
	24. flex-shrink - коэффициент сжатия - запрещает элементу сжиматься.
	25. flex: 1 0 200px - grow shrink basis. Три коэффициента  в одной строке.
	26. order - свойство отвечающее за очередность элементов. Использовать очень аккуратно.
	27. В flex вертикальные margin:
		a. не схлопываются
		b. не пробиваемы